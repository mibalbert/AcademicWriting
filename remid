// function login(data, req, res) {
//   try {
//     db.query(
//       'SELECT * FROM accounts WHERE user_email = ?',
//       [data.inputLogEmail],
//       (err, records) => {
//         if (!err) {
//           const valid = compare(data.inputLogPassword, records[0].pass);
//           // console.log(records[0])
//           if (records.length === 0) {
//             // console.log('404');

//             return {
//               status: 404,
//               message: `email "${data.inputLogEmail}" not found`,
//             };
//           } else if (!valid) {
//             // console.log('409');
//             return { status: 409, message: 'invalid password' };
//           } else {
//             return { status: 200, message: 'all good' };
//             // console.log('both user and pass valid');
//             // db.query(
//             //   `SELECT count(id) AS count FROM accounts WHERE user_email="${data.inputLogEmail}";`,
//             //   (err, records) => {
//             //     if (!err) {
//             //       if (!records[0].count) {
//             //         res.cookie('authorised', data.inputLogEmail);
//             //         res.cookie('name', result.name);

//             //         res.status(result.status).send(result.message);
//             //         return {
//             //           status: 200,
//             //           authorised: data.inputLogEmail,
//             //           role: records[0].role,
//             //           name: records[0].user_full_name,
//             //         };
//             //         // resolve({

//             //         //   status: 409,
//             //         //   message: ` email: "${data.email}", not found,`,
//             //         // });
//             //       }
//             //     }
//             //   }
//             // );
//           }
//         } else {
//           console.log(err);
//         }
//       }
//     );
//   } catch (err) {
//     console.log(err);
//     return { status: 500, message: 'Something went wrong' };
//   }
// }

// async function login(data) {
//   return new Promise((resolve, reject) => {
//     db.query(
//       `SELECT count(id) AS count FROM accounts WHERE user_email="${data.inputLogEmail}";`,
//       (err, records) => {
//         if (!err) {
//           if (!records[0].count) {
//             resolve({
//               status: 409,
//               message: ` email: "${data.email}", not found,`,
//             });
//           } else {
//             db.query(
//               `SELECT pass FROM accounts WHERE user_email="${data.inputLogEmail}";`,
//               (err, records) => {
//                 if (!err) {
//                   const valid = compare(data.inputLogPassword, records[0].pass);
//                   if (valid === false) {
//                     resolve({
//                       status: 409,
//                       message: `invalid password for account "${data.inputLogEmail}"`,
//                     });
//                   } else {
//                     db.query(
//                       `SELECT * FROM accounts WHERE user_email= "${data.inputLogEmail}"`,
//                       (err, records) => {
//                         if (!err) {
//                           const role = records[0].role;
//                           const name = records[0].user_full_name;
//                           console.log(role);
//                           resolve({
//                             status: 200,
//                             message: 'Logged in successfully',
//                             authorised: data.inputLogEmail,
//                             role: role,
//                             name: name,
//                           });
//                         } else {
//                           console.log(err);
//                           reject({
//                             status: 500,
//                             message: 'Some went really wrong',
//                           });
//                         }
//                       }
//                     );
//                   }
//                 } else {
//                   console.log(err);
//                   reject({ status: 500, message: 'Some went really wrong' });
//                 }
//               }
//             );
//           }
//         } else {
//           console.log(err);
//           reject({ status: 500, message: 'Some went really wrong' });
//         }
//       }
//     );
//     console.log(`You are logged in as: ${data.inputLogEmail}`);
//   });
// }

// const calculateOrderAmount = (items) => {
//   items.forEach(async (item) => {
//     const name = item.name;
//     const quantity = item.quantity;
//     // const {id} = await db.query('SELECT price FROM items WHERE name = ?', [name])
//     const { id, user_email } = await db.query("SELECT * FROM accounts");
//   });

//   return 1400;
// };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// exports.createPaymentIntentPOST = async (req, res) => {
//   const authorised = req.cookies["_aut121421"];
//   const { items } = req.body;

//   const data = items[0];

//   // Create a PaymentIntent with the order amount and currency
//   const paymentIntent = await stripe.paymentIntents.create({
//     // amount: calculateOrderAmount(items),
//     amount: "1222",
//     currency: "eur",
//     payment_method_types: ["card"],
//     metadata: { order_id: generateProductId() },
//   });

//   res.send({
//     clientSecret: paymentIntent.client_secret,
//   });

// const paymentIntentRetrieve = stripe.PaymentIntent.retrieve(paymentIntent.id);
// const paymentIntentRetrieve = stripe.paymentIntents.retrieve(
//   paymentIntent.id,
//   (error, paymentIntent) => {
//     if (!error) {
//       console.log("Payment intent retrieved: ", paymentIntent);
//     } else {
//       console.error(error);
//     }
//   }
// );
// };

// This is your Stripe CLI webhook secret for testing your endpoint locally.
// const endpointSecret =
//   "whsec_93e9cdb7e15387bc29848dc405ffe945f2cd979f90b20006e792294b19775126";

// const express = require("express");

// exports.webhooksPOST = (request, response) => {
//   const sig = request.headers["stripe-signature"];

//   console.log("START");
//   let event;

//   try {
//     event = stripe.webhooks.constructEvent(request.body, sig, endpointSecret);
//   } catch (err) {
//     response.status(400).send(`Webhook Error: ${err.message}`);
//     return;
//   }

//   // Handle the event
//   switch (event.type) {
//     case "payment_intent.succeeded":
//       const paymentIntentSucceeded = event.data.object;
//       console.log(paymentIntentSucceeded);
//       console.log("IT WORKED!");
//       // Then define and call a function to handle the event payment_intent.succeeded
//       break;
//     // ... handle other event types
//     default:
//       console.log(`Unhandled event type ${event.type}`);
//   }

//   // Return a 200 response to acknowledge receipt of the event
//   response.send();
// };

// const endpointSecret = "whsec_21TTs6yiVZcz6xMafxMtTHsd3yL61QWX";

// exports.webhookPOST = (request, response) => {
//   console.log("POST /webhook");
//   const sig = request.headers["stripe-signature"];

//   let event;

//   try {
//     event = stripe.webhooks.constructEvent(request.body, sig, endpointSecret);
//   } catch (err) {
//     response.status(400).send(`Webhook Error: ${err.message}`);
//     return;
//   }

//   // Handle the event
//   switch (event.type) {
//     case "payment_intent.amount_capturable_updated":
//       const paymentIntentAmountCapturableUpdated = event.data.object;
//       // Then define and call a function to handle the event payment_intent.amount_capturable_updated
//       break;
//     case "payment_intent.canceled":
//       const paymentIntentCanceled = event.data.object;
//       // Then define and call a function to handle the event payment_intent.canceled
//       break;
//     case "payment_intent.created":
//       const paymentIntentCreated = event.data.object;
//       console.log(paymentIntentCreated);
//       // Then define and call a function to handle the event payment_intent.created
//       break;
//     case "payment_intent.partially_funded":
//       const paymentIntentPartiallyFunded = event.data.object;
//       // Then define and call a function to handle the event payment_intent.partially_funded
//       break;
//     case "payment_intent.payment_failed":
//       const paymentIntentPaymentFailed = event.data.object;
//       // Then define and call a function to handle the event payment_intent.payment_failed
//       break;
//     case "payment_intent.processing":
//       const paymentIntentProcessing = event.data.object;
//       console.log(paymentIntentProcessing);
//       // Then define and call a function to handle the event payment_intent.processing
//       break;
//     case "payment_intent.requires_action":
//       const paymentIntentRequiresAction = event.data.object;
//       // Then define and call a function to handle the event payment_intent.requires_action
//       break;
//     case "payment_intent.succeeded":
//       const paymentIntentSucceeded = event.data.object;
//       console.log(paymentIntentSucceeded);
//       // Then define and call a function to handle the event payment_intent.succeeded
//       break;
//     // ... handle other event types
//     default:
//       console.log(`Unhandled event type ${event.type}`);
//   }

//   // Return a 200 response to acknowledge receipt of the event
//   response.send();
// };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// const storeItems = new Map([
//   // [1, {currency: 'cad'},]

//   // typeService: 'Academic Paper Writing ',
//   // typePaper: 'essay',
//   // numOfPages: '1',
//   // academicLevel: 'high-school',
//   // urgency: '40',
//   // paperFormat: 'OSCOLA',
//   // subjectArea: 'art',
//   // numOfResources: '1',
//   // topic: '',
//   // paperDetails: ''

//   [1, { priceInCents: 10000, name: 'Learn React Today', type: 'some Type' }],
//   [2, { priceInCents: 20000, name: 'Learn CSS Today', type: 'some Type' }],
// ]);

// exports.createCheckoutSessionsPOST = async (req, res) => {
//   console.log('GET /Create checkout session');
//   try {
//     // let result = req.body.items.map((item) => {
//     //   const storeItem = storeItems.get(item.id);
//     //   return {
//     //     name: storeItem.name,
//     //     name2: item.name,
//     //     type: storeItem.type,
//     //     value: item.value,
//     //   };
//     // });
//     // console.log("The result", result)
//     // console.log(req.body.items[0].currency)
//     const session = await stripe.checkout.sessions.create({
//       payment_method_types: ['card'],
//       mode: 'payment',
//       line_items: req.body.items.map((item) => {
//         const storeItem = storeItems.get(item.id);
//         return {
//           price_data: {
//             currency: 'usd',
//             product_data: {
//               name: storeItem.name,
//             },
//             unit_amount: storeItem.priceInCents,
//           },
//           quantity: item.quantity,
//         };
//       }),
//       // success_url: `${process.env.CLIENT_URL}/success.html`,
//       // cancel_url: `${process.env.CLIENT_URL}/cancel.html`,
//       success_url: `http://localhost:8080/`,
//       cancel_url: `http://localhost:8080/pricing`,
//     });
//     res.json({ url: session.url });
//   } catch (e) {
//     res.status(500).json({ error: e.message });
//   }
// };
